/* src/input.css (Tailwindのビルド対象ファイル) */
@tailwind base;
@tailwind components;
@tailwind utilities;

/*
  元のCSSのカスタムプロパティ（変数）を定義します。
  これらはJSでの計算や、Tailwindでは直接扱えない場所で役立ちます。
*/
:root {
  --hex-size: 40px;
}

@layer base {
  /*
    元の .game-container > * { margin: 0; } の再現。
    Tailwindの `space-y-*` などで管理するのがモダンですが、
    元の挙動を維持する場合はこのようにします。
  */
  .game-container > * {
    margin: 0;
  }
}

@layer components {
  /*
    ユーティリティクラスだけでは複雑になる要素をコンポーネント化します。
  */
  .board-info {
    @apply absolute bg-black/40 text-white py-2 px-4 rounded-lg text-lg font-bold select-none;
    text-shadow: 1px 1px 2px black;
  }

  /* --- ゲームピース関連 (変更不要とされていた部分) --- */

  .hex-wrapper {
    /* サイズは GameBoard.tsx の style 属性で設定されます */
    box-sizing: border-box;
    /* ホバーエフェクトと重ね順の制御 */
    @apply transition-all duration-200 z-[1] hover:scale-105 hover:z-[2];
  }

  .hex {
    /* Tailwind CSS utilities */
    @apply cursor-pointer; /* 背景色はSVGのfillで指定 */
    /* .hex-wrapper の padding の内側に配置されるように 100% */
    /* width と height は style 属性で 100% に設定済み */
    /* clip-path は不要 */
    /* box-sizing はSVG要素には直接影響しないことが多いが、念のため残しても良い */

    /* SVGのfillで使用する色をCSS変数で定義 (tailwind.config.js の hex-bg と合わせる) */
    --hex-bg-color: theme('colors.hex-bg', white);
  }

  .hex.highlight {
    background-color: var(--highlight-color); /* Tailwindのrgbaクラスでも可 bg-blue-500/30 */
  }
  .hex.placeable-trap-highlight {
    @apply bg-green-400/40;
  }
  .hex.detection-highlight {
    @apply bg-orange-400/30;
  }

  .piece {
    @apply absolute rounded-full z-[5] flex items-center justify-center;
  }
  .player {
    @apply piece bg-player pointer-events-none;
    box-shadow: 0 0 10px var(--tw-color-player); /* configで設定した色を参照 */
  }
  .mob {
    @apply piece pointer-events-none z-[6];
  }
  .mob-level {
    @apply text-white font-bold;
    font-size: calc(var(--hex-size) * 0.4);
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
  }
  .item-piece {
    @apply piece bg-green-500 text-white font-bold flex items-center justify-center pointer-events-none;
    box-shadow: 0 0 8px #2ecc71;
    font-size: calc(var(--hex-size) * 0.5);
  }
  .trap-piece {
    @apply piece bg-gray-400 text-gray-800 pointer-events-none;
    box-shadow: 0 0 8px #7f8c8d;
    font-size: calc(var(--hex-size) * 0.5);
  }

  .item-icon {
    @apply inline-flex items-center justify-center bg-green-500 text-white font-bold rounded-full mr-1.5 shadow-sm;
    width: calc(var(--hex-size) * 0.6);
    height: calc(var(--hex-size) * 0.6);
    font-size: calc(var(--hex-size) * 0.4);
  }

  /* カスタムトグルスイッチ */
  /* .toggle-switch {
    @apply flex items-center gap-2 cursor-pointer;
  }
  .toggle-input {
    @apply hidden;
  }
  .toggle-label {
    @apply block w-12 h-6 bg-gray-400 rounded-full relative transition-colors duration-200 ease-in-out;
  }
  .toggle-label::after {
    @apply content-[''] absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full transition-transform duration-200 ease-in-out;
  }
  .toggle-input:checked + .toggle-label {
    @apply bg-red-500;
  }
  .toggle-input:checked + .toggle-label::after {
    transform: translateX(24px);
  } */

  .game-over-message {
    @apply absolute left-1/2 top-[40%] -translate-x-1/2 -translate-y-1/2 p-5 px-10 bg-black/75 text-white text-4xl font-bold text-center rounded-xl z-[100] leading-normal;
    text-shadow: 2px 2px 4px black;
  }
}

/* ユーティリティクラス */
.is-hidden {
  @apply !hidden;
}
